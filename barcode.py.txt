from abc import ABC, abstractmethod
import re

class InvalidCodeStructureError(Exception):
    pass

class InvalidControlDigitError(Exception):
    pass

class BarCodeValidator(ABC):
    @abstractmethod
    def check(self, code: str) -> bool:
        pass

class LengthValidator(BarCodeValidator):
    def check(self, code: str) -> bool:
        return len(code) == 16

class CountryCodeValidator(BarCodeValidator):
    def check(self, code: str) -> bool:
        return code[:3].isalpha()

class ProductCodeValidator(BarCodeValidator):
    def check(self, code: str) -> bool:
        return code[3:16].isdigit()

class ControlDigitValidator(BarCodeValidator):
    @staticmethod
    def calculate_control_digit(code: str) -> int:
        digits = [int(d) for d in code[3:15]]
        sum_odd_positions = sum(digits[i] for i in range(0, len(digits), 2))
        sum_even_positions = sum(digits[i] for i in range(1, len(digits), 2))
        total_sum = sum_odd_positions * 3 + sum_even_positions
        control_digit = (10 - (total_sum % 10)) % 10
        return control_digit

    def check(self, code: str) -> bool:
        calculated_digit = ControlDigitValidator.calculate_control_digit(code)
        return calculated_digit == int(code[-1])

class BarCode:
    def __init__(self, code: str):
        self.code = code
        self.validators = [
            LengthValidator(),
            CountryCodeValidator(),
            ProductCodeValidator(),
            ControlDigitValidator()
        ]

    def validate(self) -> bool:
        for validator in self.validators[:-1]:
            if not validator.check(self.code):
                raise InvalidCodeStructureError(f"Code {self.code} has an invalid structure.")
        
        if not self.validators[-1].check(self.code):
            raise InvalidControlDigitError(f"Code {self.code} has an invalid control digit.")
        
        return True
